{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMh2O202F8BmpEp9M3iRVoK"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":20,"metadata":{"id":"YMbPGDBfj4tz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1670974399045,"user_tz":300,"elapsed":279,"user":{"displayName":"Max Hannon","userId":"11625285732207788632"}},"outputId":"c1a2f192-5e2b-476e-d391-47feeecb5433"},"outputs":[{"output_type":"stream","name":"stdout","text":["[('E', 224)]\n","Dev score: 0.385\n","Test score: 0.365\n","[0.38, 0.365, 0.295, 0.405, 0.32, 0.38, 0.33, 0.43, 0.345, 0.41, 0.4, 0.335, 0.34, 0.365, 0.375, 0.325, 0.335, 0.365, 0.375, 0.345, 0.395, 0.445, 0.385, 0.37, 0.33, 0.365, 0.36, 0.395, 0.365, 0.41, 0.34, 0.34, 0.395, 0.36, 0.375, 0.335, 0.355, 0.385, 0.355, 0.34, 0.365, 0.39, 0.39, 0.345, 0.325, 0.455, 0.415, 0.37, 0.365, 0.42, 0.38, 0.42, 0.39, 0.42, 0.36, 0.35, 0.37, 0.41, 0.345, 0.35, 0.37, 0.435, 0.36, 0.365, 0.415, 0.395, 0.355, 0.375, 0.34, 0.375, 0.39, 0.37, 0.335, 0.39, 0.335, 0.335, 0.35, 0.355, 0.35, 0.355, 0.42, 0.35, 0.41, 0.37, 0.425, 0.385, 0.35, 0.38, 0.4, 0.39, 0.36, 0.385, 0.37, 0.345, 0.4, 0.43, 0.365, 0.375, 0.405, 0.375, 0.39, 0.375, 0.4, 0.355, 0.355, 0.415, 0.33, 0.385, 0.44, 0.38, 0.41, 0.345, 0.35, 0.4, 0.435, 0.39, 0.315, 0.4, 0.35, 0.35, 0.37, 0.36, 0.38, 0.365, 0.34, 0.395, 0.38, 0.42, 0.35, 0.335, 0.44, 0.365, 0.405, 0.345, 0.39, 0.375, 0.36, 0.33, 0.39, 0.335, 0.325, 0.365, 0.355, 0.36, 0.475, 0.375, 0.31, 0.32, 0.385, 0.475, 0.38, 0.385, 0.36, 0.37, 0.375, 0.365, 0.315, 0.365, 0.39, 0.325, 0.38, 0.405, 0.41, 0.375, 0.335, 0.34, 0.3, 0.365, 0.4, 0.41, 0.395, 0.39, 0.395, 0.455, 0.37, 0.36, 0.405, 0.37, 0.435, 0.42, 0.325, 0.405, 0.4, 0.41, 0.355, 0.33, 0.4, 0.33, 0.37, 0.375, 0.415, 0.43, 0.41, 0.37, 0.335, 0.395, 0.39, 0.325, 0.38, 0.395]\n","0.37465\n","0.033017078913798535\n"]}],"source":["import csv\n","from collections import Counter\n","import numpy as np\n","import statistics\n","\n","def load_data(filename):\n","    '''\n","    Method for loading in data from tsv.\n","    \n","    Input:\n","    - filename (str): tsv file containing annotated data must include\n","                      header with the named columns \"label\" and \"text\"\n","\n","    Returns a lists of strings corresponding to the document texts\n","    and labels respectively\n","    '''\n","    with open(filename, encoding=\"utf-8\", newline='') as tsv:\n","        reader = csv.DictReader(tsv, delimiter='\\t')\n","        \n","        texts, labels = [], []\n","        for row in reader:\n","            texts.append(row['text'])\n","            labels.append(row['label'])\n","\n","    return texts, labels\n","\n","def get_prediction(data):\n","\n","  mode = Counter(data[1])\n","  mode.most_common()   # Returns all unique items and their counts\n","  return mode.most_common(1)  # Returns the highest occurring item\n","\n","print(get_prediction(load_data('train.tsv')))\n","\n","def run_flat_prediction(train, dev, test):\n","  train_data = load_data(train)\n","  dev_data = load_data(dev)\n","  test_data = load_data(test)\n","\n","  prediction = get_prediction(train_data)[0][0]\n","\n","  score = 0\n","  for e in dev_data[1]:\n","    if e == prediction:\n","      score += 1\n","  print('Dev score:', score/len(dev_data[1]))\n","\n","  score = 0\n","\n","  for e in test_data[1]:\n","    if e == prediction:\n","      score += 1\n","  print('Test score:', score/len(test_data[1]))\n","\n","run_flat_prediction('train.tsv', 'dev.tsv', 'test.tsv')\n","\n","def bootstrap_sample(items, n):\n","  return np.random.choice(items, size=n, replace=True)\n","\n","lister = ['E']*374 + ['H']*207 + ['AL']*204 + ['SN']*90 + ['SL']*83 + ['G']*42\n","\n","ret_list = list()\n","for i in range(200):\n","  ret_list.append(bootstrap_sample(lister,200).tolist().count('E')/200)\n","print(ret_list)\n","\n","print(statistics.mean(ret_list))\n","print(statistics.pstdev(ret_list))"]},{"cell_type":"code","source":[],"metadata":{"id":"Hgl0oiln5AoO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"sAvnBHQI9jR8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","\n"],"metadata":{"id":"GPG1T_TzAFi6"},"execution_count":null,"outputs":[]}]}